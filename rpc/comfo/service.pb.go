// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/ti-mo/comfo/rpc/comfo/service.proto

/*
Package comfo is a generated protocol buffer package.

It is generated from these files:
	github.com/ti-mo/comfo/rpc/comfo/service.proto

It has these top-level messages:
	Noop
	Bypass
	BootInfo
	Fans
	FanProfiles
	FanSpeedTarget
	Hours
	Temps
*/
package comfo

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Noop struct {
}

func (m *Noop) Reset()                    { *m = Noop{} }
func (m *Noop) String() string            { return proto.CompactTextString(m) }
func (*Noop) ProtoMessage()               {}
func (*Noop) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Bypass struct {
	Factor     int32 `protobuf:"varint,1,opt,name=Factor" json:"Factor,omitempty"`
	Level      int32 `protobuf:"varint,2,opt,name=Level" json:"Level,omitempty"`
	Correction int32 `protobuf:"varint,3,opt,name=Correction" json:"Correction,omitempty"`
	SummerMode bool  `protobuf:"varint,4,opt,name=SummerMode" json:"SummerMode,omitempty"`
}

func (m *Bypass) Reset()                    { *m = Bypass{} }
func (m *Bypass) String() string            { return proto.CompactTextString(m) }
func (*Bypass) ProtoMessage()               {}
func (*Bypass) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Bypass) GetFactor() int32 {
	if m != nil {
		return m.Factor
	}
	return 0
}

func (m *Bypass) GetLevel() int32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Bypass) GetCorrection() int32 {
	if m != nil {
		return m.Correction
	}
	return 0
}

func (m *Bypass) GetSummerMode() bool {
	if m != nil {
		return m.SummerMode
	}
	return false
}

type BootInfo struct {
	MajorVersion int32  `protobuf:"varint,1,opt,name=MajorVersion" json:"MajorVersion,omitempty"`
	MinorVersion int32  `protobuf:"varint,2,opt,name=MinorVersion" json:"MinorVersion,omitempty"`
	BetaVersion  int32  `protobuf:"varint,3,opt,name=BetaVersion" json:"BetaVersion,omitempty"`
	DeviceName   string `protobuf:"bytes,4,opt,name=DeviceName" json:"DeviceName,omitempty"`
}

func (m *BootInfo) Reset()                    { *m = BootInfo{} }
func (m *BootInfo) String() string            { return proto.CompactTextString(m) }
func (*BootInfo) ProtoMessage()               {}
func (*BootInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BootInfo) GetMajorVersion() int32 {
	if m != nil {
		return m.MajorVersion
	}
	return 0
}

func (m *BootInfo) GetMinorVersion() int32 {
	if m != nil {
		return m.MinorVersion
	}
	return 0
}

func (m *BootInfo) GetBetaVersion() int32 {
	if m != nil {
		return m.BetaVersion
	}
	return 0
}

func (m *BootInfo) GetDeviceName() string {
	if m != nil {
		return m.DeviceName
	}
	return ""
}

type Fans struct {
	InPercent  int32 `protobuf:"varint,1,opt,name=InPercent" json:"InPercent,omitempty"`
	OutPercent int32 `protobuf:"varint,2,opt,name=OutPercent" json:"OutPercent,omitempty"`
	InSpeed    int32 `protobuf:"varint,3,opt,name=InSpeed" json:"InSpeed,omitempty"`
	OutSpeed   int32 `protobuf:"varint,4,opt,name=OutSpeed" json:"OutSpeed,omitempty"`
}

func (m *Fans) Reset()                    { *m = Fans{} }
func (m *Fans) String() string            { return proto.CompactTextString(m) }
func (*Fans) ProtoMessage()               {}
func (*Fans) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Fans) GetInPercent() int32 {
	if m != nil {
		return m.InPercent
	}
	return 0
}

func (m *Fans) GetOutPercent() int32 {
	if m != nil {
		return m.OutPercent
	}
	return 0
}

func (m *Fans) GetInSpeed() int32 {
	if m != nil {
		return m.InSpeed
	}
	return 0
}

func (m *Fans) GetOutSpeed() int32 {
	if m != nil {
		return m.OutSpeed
	}
	return 0
}

type FanProfiles struct {
	OutAway      int32 `protobuf:"varint,1,opt,name=OutAway" json:"OutAway,omitempty"`
	OutLow       int32 `protobuf:"varint,2,opt,name=OutLow" json:"OutLow,omitempty"`
	OutMid       int32 `protobuf:"varint,3,opt,name=OutMid" json:"OutMid,omitempty"`
	OutHigh      int32 `protobuf:"varint,4,opt,name=OutHigh" json:"OutHigh,omitempty"`
	InFanActive  bool  `protobuf:"varint,5,opt,name=InFanActive" json:"InFanActive,omitempty"`
	InAway       int32 `protobuf:"varint,6,opt,name=InAway" json:"InAway,omitempty"`
	InLow        int32 `protobuf:"varint,7,opt,name=InLow" json:"InLow,omitempty"`
	InMid        int32 `protobuf:"varint,8,opt,name=InMid" json:"InMid,omitempty"`
	InHigh       int32 `protobuf:"varint,9,opt,name=InHigh" json:"InHigh,omitempty"`
	CurrentOut   int32 `protobuf:"varint,10,opt,name=CurrentOut" json:"CurrentOut,omitempty"`
	CurrentIn    int32 `protobuf:"varint,11,opt,name=CurrentIn" json:"CurrentIn,omitempty"`
	CurrentLevel int32 `protobuf:"varint,12,opt,name=CurrentLevel" json:"CurrentLevel,omitempty"`
}

func (m *FanProfiles) Reset()                    { *m = FanProfiles{} }
func (m *FanProfiles) String() string            { return proto.CompactTextString(m) }
func (*FanProfiles) ProtoMessage()               {}
func (*FanProfiles) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FanProfiles) GetOutAway() int32 {
	if m != nil {
		return m.OutAway
	}
	return 0
}

func (m *FanProfiles) GetOutLow() int32 {
	if m != nil {
		return m.OutLow
	}
	return 0
}

func (m *FanProfiles) GetOutMid() int32 {
	if m != nil {
		return m.OutMid
	}
	return 0
}

func (m *FanProfiles) GetOutHigh() int32 {
	if m != nil {
		return m.OutHigh
	}
	return 0
}

func (m *FanProfiles) GetInFanActive() bool {
	if m != nil {
		return m.InFanActive
	}
	return false
}

func (m *FanProfiles) GetInAway() int32 {
	if m != nil {
		return m.InAway
	}
	return 0
}

func (m *FanProfiles) GetInLow() int32 {
	if m != nil {
		return m.InLow
	}
	return 0
}

func (m *FanProfiles) GetInMid() int32 {
	if m != nil {
		return m.InMid
	}
	return 0
}

func (m *FanProfiles) GetInHigh() int32 {
	if m != nil {
		return m.InHigh
	}
	return 0
}

func (m *FanProfiles) GetCurrentOut() int32 {
	if m != nil {
		return m.CurrentOut
	}
	return 0
}

func (m *FanProfiles) GetCurrentIn() int32 {
	if m != nil {
		return m.CurrentIn
	}
	return 0
}

func (m *FanProfiles) GetCurrentLevel() int32 {
	if m != nil {
		return m.CurrentLevel
	}
	return 0
}

type FanSpeedTarget struct {
	Abs int32 `protobuf:"varint,1,opt,name=abs" json:"abs,omitempty"`
	Rel bool  `protobuf:"varint,2,opt,name=rel" json:"rel,omitempty"`
}

func (m *FanSpeedTarget) Reset()                    { *m = FanSpeedTarget{} }
func (m *FanSpeedTarget) String() string            { return proto.CompactTextString(m) }
func (*FanSpeedTarget) ProtoMessage()               {}
func (*FanSpeedTarget) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FanSpeedTarget) GetAbs() int32 {
	if m != nil {
		return m.Abs
	}
	return 0
}

func (m *FanSpeedTarget) GetRel() bool {
	if m != nil {
		return m.Rel
	}
	return false
}

type Hours struct {
	FanAway      int32 `protobuf:"varint,1,opt,name=FanAway" json:"FanAway,omitempty"`
	FanLow       int32 `protobuf:"varint,2,opt,name=FanLow" json:"FanLow,omitempty"`
	FanMid       int32 `protobuf:"varint,3,opt,name=FanMid" json:"FanMid,omitempty"`
	FanHigh      int32 `protobuf:"varint,4,opt,name=FanHigh" json:"FanHigh,omitempty"`
	FrostProtect int32 `protobuf:"varint,5,opt,name=FrostProtect" json:"FrostProtect,omitempty"`
	Reheating    int32 `protobuf:"varint,6,opt,name=Reheating" json:"Reheating,omitempty"`
	BypassOpen   int32 `protobuf:"varint,7,opt,name=BypassOpen" json:"BypassOpen,omitempty"`
	Filter       int32 `protobuf:"varint,8,opt,name=Filter" json:"Filter,omitempty"`
}

func (m *Hours) Reset()                    { *m = Hours{} }
func (m *Hours) String() string            { return proto.CompactTextString(m) }
func (*Hours) ProtoMessage()               {}
func (*Hours) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *Hours) GetFanAway() int32 {
	if m != nil {
		return m.FanAway
	}
	return 0
}

func (m *Hours) GetFanLow() int32 {
	if m != nil {
		return m.FanLow
	}
	return 0
}

func (m *Hours) GetFanMid() int32 {
	if m != nil {
		return m.FanMid
	}
	return 0
}

func (m *Hours) GetFanHigh() int32 {
	if m != nil {
		return m.FanHigh
	}
	return 0
}

func (m *Hours) GetFrostProtect() int32 {
	if m != nil {
		return m.FrostProtect
	}
	return 0
}

func (m *Hours) GetReheating() int32 {
	if m != nil {
		return m.Reheating
	}
	return 0
}

func (m *Hours) GetBypassOpen() int32 {
	if m != nil {
		return m.BypassOpen
	}
	return 0
}

func (m *Hours) GetFilter() int32 {
	if m != nil {
		return m.Filter
	}
	return 0
}

type Temps struct {
	Comfort     float32 `protobuf:"fixed32,1,opt,name=Comfort" json:"Comfort,omitempty"`
	OutsideAir  float32 `protobuf:"fixed32,2,opt,name=OutsideAir" json:"OutsideAir,omitempty"`
	SupplyAir   float32 `protobuf:"fixed32,3,opt,name=SupplyAir" json:"SupplyAir,omitempty"`
	OutAir      float32 `protobuf:"fixed32,4,opt,name=OutAir" json:"OutAir,omitempty"`
	ExhaustAir  float32 `protobuf:"fixed32,5,opt,name=ExhaustAir" json:"ExhaustAir,omitempty"`
	GeoHeat     float32 `protobuf:"fixed32,6,opt,name=GeoHeat" json:"GeoHeat,omitempty"`
	Reheating   float32 `protobuf:"fixed32,7,opt,name=Reheating" json:"Reheating,omitempty"`
	KitchenHood float32 `protobuf:"fixed32,8,opt,name=KitchenHood" json:"KitchenHood,omitempty"`
}

func (m *Temps) Reset()                    { *m = Temps{} }
func (m *Temps) String() string            { return proto.CompactTextString(m) }
func (*Temps) ProtoMessage()               {}
func (*Temps) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Temps) GetComfort() float32 {
	if m != nil {
		return m.Comfort
	}
	return 0
}

func (m *Temps) GetOutsideAir() float32 {
	if m != nil {
		return m.OutsideAir
	}
	return 0
}

func (m *Temps) GetSupplyAir() float32 {
	if m != nil {
		return m.SupplyAir
	}
	return 0
}

func (m *Temps) GetOutAir() float32 {
	if m != nil {
		return m.OutAir
	}
	return 0
}

func (m *Temps) GetExhaustAir() float32 {
	if m != nil {
		return m.ExhaustAir
	}
	return 0
}

func (m *Temps) GetGeoHeat() float32 {
	if m != nil {
		return m.GeoHeat
	}
	return 0
}

func (m *Temps) GetReheating() float32 {
	if m != nil {
		return m.Reheating
	}
	return 0
}

func (m *Temps) GetKitchenHood() float32 {
	if m != nil {
		return m.KitchenHood
	}
	return 0
}

func init() {
	proto.RegisterType((*Noop)(nil), "comfo.noop")
	proto.RegisterType((*Bypass)(nil), "comfo.Bypass")
	proto.RegisterType((*BootInfo)(nil), "comfo.BootInfo")
	proto.RegisterType((*Fans)(nil), "comfo.Fans")
	proto.RegisterType((*FanProfiles)(nil), "comfo.FanProfiles")
	proto.RegisterType((*FanSpeedTarget)(nil), "comfo.FanSpeedTarget")
	proto.RegisterType((*Hours)(nil), "comfo.Hours")
	proto.RegisterType((*Temps)(nil), "comfo.Temps")
}

func init() { proto.RegisterFile("github.com/ti-mo/comfo/rpc/comfo/service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 743 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x55, 0x6d, 0x6e, 0xdb, 0x46,
	0x10, 0x85, 0x68, 0x51, 0x1f, 0x2b, 0xd7, 0x2d, 0x88, 0xb6, 0x20, 0x8c, 0xa2, 0x10, 0x58, 0x14,
	0x35, 0x50, 0x44, 0x86, 0x93, 0x5c, 0xc0, 0x72, 0x22, 0x4b, 0x88, 0x1d, 0x19, 0x94, 0x91, 0x1f,
	0xf9, 0xb7, 0xa6, 0xc7, 0x12, 0x03, 0x69, 0x97, 0x58, 0x2e, 0xe5, 0x38, 0xe7, 0xc8, 0x59, 0x72,
	0x8f, 0x1c, 0x22, 0x07, 0xc8, 0x0d, 0x82, 0xd9, 0x19, 0x8a, 0x2b, 0x20, 0xff, 0xf8, 0xde, 0x0c,
	0xde, 0xbe, 0x9d, 0x99, 0x1d, 0x8a, 0xd1, 0x32, 0xb7, 0xab, 0xea, 0x6e, 0x94, 0xe9, 0xcd, 0xa9,
	0xcd, 0x9f, 0x6d, 0xf4, 0x69, 0xa6, 0x37, 0x0f, 0xfa, 0xd4, 0x14, 0x19, 0x7f, 0x95, 0x60, 0xb6,
	0x79, 0x06, 0xa3, 0xc2, 0x68, 0xab, 0xa3, 0xd0, 0x91, 0x49, 0x47, 0xb4, 0x95, 0xd6, 0x45, 0xb2,
	0x15, 0x9d, 0xf1, 0x53, 0x21, 0xcb, 0x32, 0xfa, 0x53, 0x74, 0x26, 0x32, 0xb3, 0xda, 0xc4, 0xad,
	0x61, 0xeb, 0x24, 0x4c, 0x19, 0x45, 0xbf, 0x8b, 0xf0, 0x0a, 0xb6, 0xb0, 0x8e, 0x03, 0x47, 0x13,
	0x88, 0xfe, 0x16, 0xe2, 0x42, 0x1b, 0x03, 0x99, 0xcd, 0xb5, 0x8a, 0x0f, 0x5c, 0xc8, 0x63, 0x30,
	0xbe, 0xa8, 0x36, 0x1b, 0x30, 0xd7, 0xfa, 0x1e, 0xe2, 0xf6, 0xb0, 0x75, 0xd2, 0x4b, 0x3d, 0x26,
	0xf9, 0xdc, 0x12, 0xbd, 0xb1, 0xd6, 0x76, 0xa6, 0x1e, 0x74, 0x94, 0x88, 0xc3, 0x6b, 0xf9, 0x41,
	0x9b, 0x77, 0x60, 0x4a, 0x94, 0x23, 0x03, 0x7b, 0x9c, 0xcb, 0xc9, 0x55, 0x93, 0x13, 0x70, 0x8e,
	0xc7, 0x45, 0x43, 0x31, 0x18, 0x83, 0x95, 0x75, 0x0a, 0xb9, 0xf2, 0x29, 0xb4, 0xf5, 0x0a, 0xb0,
	0x1a, 0x6f, 0xe5, 0x86, 0x6c, 0xf5, 0x53, 0x8f, 0x49, 0x3e, 0x89, 0xf6, 0x44, 0xaa, 0x32, 0xfa,
	0x4b, 0xf4, 0x67, 0xea, 0x06, 0x4c, 0x06, 0xca, 0xb2, 0x9d, 0x86, 0x40, 0x95, 0x79, 0x65, 0xeb,
	0x30, 0x39, 0xf1, 0x98, 0x28, 0x16, 0xdd, 0x99, 0x5a, 0x14, 0x00, 0xf7, 0xec, 0xa1, 0x86, 0xd1,
	0xb1, 0xe8, 0xcd, 0x2b, 0x4b, 0xa1, 0xb6, 0x0b, 0xed, 0x70, 0xf2, 0x35, 0x10, 0x83, 0x89, 0x54,
	0x37, 0x46, 0x3f, 0xe4, 0x6b, 0x28, 0x51, 0x65, 0x5e, 0xd9, 0xf3, 0x47, 0xf9, 0xc4, 0x0e, 0x6a,
	0x88, 0xad, 0x9a, 0x57, 0xf6, 0x4a, 0x3f, 0xf2, 0xd9, 0x8c, 0x98, 0xbf, 0xce, 0xeb, 0x63, 0x19,
	0xb1, 0xd2, 0x34, 0x5f, 0xae, 0xf8, 0xd0, 0x1a, 0x62, 0xc5, 0x66, 0x6a, 0x22, 0xd5, 0x79, 0x66,
	0xf3, 0x2d, 0xc4, 0xa1, 0xeb, 0x93, 0x4f, 0xa1, 0xe6, 0x4c, 0x39, 0x13, 0x1d, 0xd2, 0x24, 0x84,
	0x63, 0x31, 0x53, 0x68, 0xa1, 0x4b, 0x63, 0xe1, 0x00, 0xb1, 0x68, 0xa0, 0x57, 0xb3, 0x78, 0xbe,
	0xd3, 0x70, 0xc7, 0xf7, 0x6b, 0x0d, 0x77, 0x3a, 0x0e, 0x51, 0x65, 0x0c, 0x28, 0x3b, 0xaf, 0x6c,
	0x2c, 0x78, 0x88, 0x76, 0x0c, 0x76, 0x81, 0xd1, 0x4c, 0xc5, 0x03, 0xea, 0xc2, 0x8e, 0xc0, 0x89,
	0x60, 0x40, 0xf3, 0x79, 0x48, 0x13, 0xe1, 0x73, 0xc9, 0x4b, 0x71, 0x34, 0x91, 0x54, 0xfb, 0x5b,
	0x69, 0x96, 0x60, 0xa3, 0xdf, 0xc4, 0x81, 0xbc, 0x2b, 0xb9, 0xa2, 0xf8, 0x89, 0x8c, 0xe1, 0xf1,
	0xee, 0xa5, 0xf8, 0x99, 0x7c, 0x6b, 0x89, 0x70, 0xaa, 0x2b, 0xe3, 0x7a, 0x80, 0xa5, 0xf0, 0x7a,
	0xc0, 0x90, 0x9e, 0x8b, 0xf2, 0x7a, 0x40, 0x88, 0x79, 0xaf, 0x07, 0x84, 0x58, 0xc9, 0xef, 0x01,
	0x43, 0xbc, 0xc7, 0xc4, 0xe8, 0xd2, 0xde, 0x18, 0x6d, 0x21, 0xb3, 0xae, 0x09, 0x61, 0xba, 0xc7,
	0x61, 0x25, 0x52, 0x58, 0x81, 0xb4, 0xb9, 0x5a, 0x72, 0x23, 0x1a, 0x02, 0xeb, 0x48, 0x8f, 0x78,
	0x5e, 0x80, 0xe2, 0x86, 0x78, 0x8c, 0xf3, 0x94, 0xaf, 0x2d, 0x18, 0x6e, 0x0b, 0xa3, 0xe4, 0x7b,
	0x4b, 0x84, 0xb7, 0xb0, 0x29, 0xdc, 0x3d, 0x2f, 0x70, 0x2f, 0x18, 0x9a, 0xf6, 0x20, 0xad, 0x21,
	0xcf, 0x7a, 0x99, 0xdf, 0xc3, 0x79, 0x6e, 0xdc, 0x5d, 0x83, 0xd4, 0x63, 0xd0, 0xd9, 0xa2, 0x2a,
	0x8a, 0xf5, 0x13, 0x86, 0x0f, 0x5c, 0xb8, 0x21, 0x78, 0x22, 0x31, 0xd4, 0x76, 0x21, 0x46, 0xa8,
	0xfa, 0xfa, 0xe3, 0x4a, 0x56, 0xa5, 0x8b, 0x85, 0xa4, 0xda, 0x30, 0xe8, 0xe7, 0x12, 0xf4, 0x14,
	0xa4, 0x75, 0xb7, 0x0d, 0xd2, 0x1a, 0xee, 0x57, 0xa2, 0x4b, 0xe7, 0x35, 0x95, 0x18, 0x8a, 0xc1,
	0x9b, 0xdc, 0x66, 0x2b, 0x50, 0x53, 0xad, 0x69, 0x0a, 0x83, 0xd4, 0xa7, 0x9e, 0x7f, 0x09, 0x44,
	0xe8, 0xee, 0x16, 0xfd, 0x2f, 0x06, 0x97, 0x60, 0x77, 0x4b, 0x68, 0x30, 0x72, 0x9b, 0x71, 0x84,
	0x6b, 0xf1, 0xf8, 0x57, 0x06, 0xbb, 0xe8, 0xbf, 0xa2, 0x77, 0x09, 0x96, 0x8a, 0xb5, 0x97, 0x79,
	0xc8, 0x80, 0x42, 0xff, 0x89, 0x3e, 0x6a, 0xd2, 0x46, 0xdd, 0xcb, 0xfb, 0xa5, 0x56, 0xa4, 0xd8,
	0x3f, 0x78, 0x41, 0xeb, 0x76, 0xcd, 0x5e, 0x5a, 0x0d, 0x5c, 0xe4, 0x4c, 0x1c, 0x51, 0xd2, 0x6e,
	0x27, 0xec, 0xe5, 0x46, 0x4d, 0xee, 0x2e, 0x81, 0x7c, 0xd2, 0xf0, 0xfe, 0xd4, 0x27, 0x85, 0xce,
	0xc4, 0x60, 0xe1, 0x94, 0x69, 0x2d, 0xfd, 0xd1, 0x28, 0x79, 0x6f, 0xe5, 0xd8, 0x17, 0x18, 0x77,
	0xdf, 0xd3, 0xaf, 0xe3, 0xae, 0xe3, 0x7e, 0x24, 0x2f, 0x7e, 0x04, 0x00, 0x00, 0xff, 0xff, 0x21,
	0xa6, 0xce, 0xe5, 0x7a, 0x06, 0x00, 0x00,
}
