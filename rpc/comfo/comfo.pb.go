// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.3
// source: comfo.proto

package comfo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type FlushCacheRequest_CacheType int32

const (
	FlushCacheRequest_BootInfo FlushCacheRequest_CacheType = 0
	FlushCacheRequest_Fans     FlushCacheRequest_CacheType = 1
	FlushCacheRequest_Temps    FlushCacheRequest_CacheType = 2
	FlushCacheRequest_Profiles FlushCacheRequest_CacheType = 3
	FlushCacheRequest_Bypass   FlushCacheRequest_CacheType = 4
	FlushCacheRequest_All      FlushCacheRequest_CacheType = 10
)

// Enum value maps for FlushCacheRequest_CacheType.
var (
	FlushCacheRequest_CacheType_name = map[int32]string{
		0:  "BootInfo",
		1:  "Fans",
		2:  "Temps",
		3:  "Profiles",
		4:  "Bypass",
		10: "All",
	}
	FlushCacheRequest_CacheType_value = map[string]int32{
		"BootInfo": 0,
		"Fans":     1,
		"Temps":    2,
		"Profiles": 3,
		"Bypass":   4,
		"All":      10,
	}
)

func (x FlushCacheRequest_CacheType) Enum() *FlushCacheRequest_CacheType {
	p := new(FlushCacheRequest_CacheType)
	*p = x
	return p
}

func (x FlushCacheRequest_CacheType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlushCacheRequest_CacheType) Descriptor() protoreflect.EnumDescriptor {
	return file_comfo_proto_enumTypes[0].Descriptor()
}

func (FlushCacheRequest_CacheType) Type() protoreflect.EnumType {
	return &file_comfo_proto_enumTypes[0]
}

func (x FlushCacheRequest_CacheType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlushCacheRequest_CacheType.Descriptor instead.
func (FlushCacheRequest_CacheType) EnumDescriptor() ([]byte, []int) {
	return file_comfo_proto_rawDescGZIP(), []int{14, 0}
}

type Noop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Noop) Reset() {
	*x = Noop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comfo_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Noop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Noop) ProtoMessage() {}

func (x *Noop) ProtoReflect() protoreflect.Message {
	mi := &file_comfo_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Noop.ProtoReflect.Descriptor instead.
func (*Noop) Descriptor() ([]byte, []int) {
	return file_comfo_proto_rawDescGZIP(), []int{0}
}

type Bypass struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Factor     uint32 `protobuf:"varint,1,opt,name=Factor,proto3" json:"Factor,omitempty"`
	Level      uint32 `protobuf:"varint,2,opt,name=Level,proto3" json:"Level,omitempty"`
	Correction uint32 `protobuf:"varint,3,opt,name=Correction,proto3" json:"Correction,omitempty"`
	SummerMode bool   `protobuf:"varint,4,opt,name=SummerMode,proto3" json:"SummerMode,omitempty"`
}

func (x *Bypass) Reset() {
	*x = Bypass{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comfo_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Bypass) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Bypass) ProtoMessage() {}

func (x *Bypass) ProtoReflect() protoreflect.Message {
	mi := &file_comfo_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Bypass.ProtoReflect.Descriptor instead.
func (*Bypass) Descriptor() ([]byte, []int) {
	return file_comfo_proto_rawDescGZIP(), []int{1}
}

func (x *Bypass) GetFactor() uint32 {
	if x != nil {
		return x.Factor
	}
	return 0
}

func (x *Bypass) GetLevel() uint32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *Bypass) GetCorrection() uint32 {
	if x != nil {
		return x.Correction
	}
	return 0
}

func (x *Bypass) GetSummerMode() bool {
	if x != nil {
		return x.SummerMode
	}
	return false
}

type BootInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MajorVersion uint32 `protobuf:"varint,1,opt,name=MajorVersion,proto3" json:"MajorVersion,omitempty"`
	MinorVersion uint32 `protobuf:"varint,2,opt,name=MinorVersion,proto3" json:"MinorVersion,omitempty"`
	BetaVersion  uint32 `protobuf:"varint,3,opt,name=BetaVersion,proto3" json:"BetaVersion,omitempty"`
	DeviceName   string `protobuf:"bytes,4,opt,name=DeviceName,proto3" json:"DeviceName,omitempty"`
}

func (x *BootInfo) Reset() {
	*x = BootInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comfo_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BootInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BootInfo) ProtoMessage() {}

func (x *BootInfo) ProtoReflect() protoreflect.Message {
	mi := &file_comfo_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BootInfo.ProtoReflect.Descriptor instead.
func (*BootInfo) Descriptor() ([]byte, []int) {
	return file_comfo_proto_rawDescGZIP(), []int{2}
}

func (x *BootInfo) GetMajorVersion() uint32 {
	if x != nil {
		return x.MajorVersion
	}
	return 0
}

func (x *BootInfo) GetMinorVersion() uint32 {
	if x != nil {
		return x.MinorVersion
	}
	return 0
}

func (x *BootInfo) GetBetaVersion() uint32 {
	if x != nil {
		return x.BetaVersion
	}
	return 0
}

func (x *BootInfo) GetDeviceName() string {
	if x != nil {
		return x.DeviceName
	}
	return ""
}

type ComfortTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComfortTemp uint32 `protobuf:"varint,1,opt,name=ComfortTemp,proto3" json:"ComfortTemp,omitempty"` // Desired temperature for the heat exchanger.
}

func (x *ComfortTarget) Reset() {
	*x = ComfortTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comfo_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComfortTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComfortTarget) ProtoMessage() {}

func (x *ComfortTarget) ProtoReflect() protoreflect.Message {
	mi := &file_comfo_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComfortTarget.ProtoReflect.Descriptor instead.
func (*ComfortTarget) Descriptor() ([]byte, []int) {
	return file_comfo_proto_rawDescGZIP(), []int{3}
}

func (x *ComfortTarget) GetComfortTemp() uint32 {
	if x != nil {
		return x.ComfortTemp
	}
	return 0
}

type ComfortModified struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modified     bool   `protobuf:"varint,1,opt,name=Modified,proto3" json:"Modified,omitempty"`         // Whether the comfort temperature was modified or not.
	OriginalTemp uint32 `protobuf:"varint,2,opt,name=OriginalTemp,proto3" json:"OriginalTemp,omitempty"` // The temperature before this modification.
	TargetTemp   uint32 `protobuf:"varint,3,opt,name=TargetTemp,proto3" json:"TargetTemp,omitempty"`     // Target temperature sent in the request.
	ReqTime      string `protobuf:"bytes,4,opt,name=ReqTime,proto3" json:"ReqTime,omitempty"`            // Total time spent processing the back-end request.
}

func (x *ComfortModified) Reset() {
	*x = ComfortModified{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comfo_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComfortModified) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComfortModified) ProtoMessage() {}

func (x *ComfortModified) ProtoReflect() protoreflect.Message {
	mi := &file_comfo_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComfortModified.ProtoReflect.Descriptor instead.
func (*ComfortModified) Descriptor() ([]byte, []int) {
	return file_comfo_proto_rawDescGZIP(), []int{4}
}

func (x *ComfortModified) GetModified() bool {
	if x != nil {
		return x.Modified
	}
	return false
}

func (x *ComfortModified) GetOriginalTemp() uint32 {
	if x != nil {
		return x.OriginalTemp
	}
	return 0
}

func (x *ComfortModified) GetTargetTemp() uint32 {
	if x != nil {
		return x.TargetTemp
	}
	return 0
}

func (x *ComfortModified) GetReqTime() string {
	if x != nil {
		return x.ReqTime
	}
	return ""
}

type Errors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter bool `protobuf:"varint,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *Errors) Reset() {
	*x = Errors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comfo_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Errors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Errors) ProtoMessage() {}

func (x *Errors) ProtoReflect() protoreflect.Message {
	mi := &file_comfo_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Errors.ProtoReflect.Descriptor instead.
func (*Errors) Descriptor() ([]byte, []int) {
	return file_comfo_proto_rawDescGZIP(), []int{5}
}

func (x *Errors) GetFilter() bool {
	if x != nil {
		return x.Filter
	}
	return false
}

type Fans struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InPercent  uint32 `protobuf:"varint,1,opt,name=InPercent,proto3" json:"InPercent,omitempty"`
	OutPercent uint32 `protobuf:"varint,2,opt,name=OutPercent,proto3" json:"OutPercent,omitempty"`
	InSpeed    uint32 `protobuf:"varint,3,opt,name=InSpeed,proto3" json:"InSpeed,omitempty"`
	OutSpeed   uint32 `protobuf:"varint,4,opt,name=OutSpeed,proto3" json:"OutSpeed,omitempty"`
}

func (x *Fans) Reset() {
	*x = Fans{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comfo_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fans) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fans) ProtoMessage() {}

func (x *Fans) ProtoReflect() protoreflect.Message {
	mi := &file_comfo_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fans.ProtoReflect.Descriptor instead.
func (*Fans) Descriptor() ([]byte, []int) {
	return file_comfo_proto_rawDescGZIP(), []int{6}
}

func (x *Fans) GetInPercent() uint32 {
	if x != nil {
		return x.InPercent
	}
	return 0
}

func (x *Fans) GetOutPercent() uint32 {
	if x != nil {
		return x.OutPercent
	}
	return 0
}

func (x *Fans) GetInSpeed() uint32 {
	if x != nil {
		return x.InSpeed
	}
	return 0
}

func (x *Fans) GetOutSpeed() uint32 {
	if x != nil {
		return x.OutSpeed
	}
	return 0
}

type FanProfiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OutAway     uint32 `protobuf:"varint,1,opt,name=OutAway,proto3" json:"OutAway,omitempty"`
	OutLow      uint32 `protobuf:"varint,2,opt,name=OutLow,proto3" json:"OutLow,omitempty"`
	OutMid      uint32 `protobuf:"varint,3,opt,name=OutMid,proto3" json:"OutMid,omitempty"`
	OutHigh     uint32 `protobuf:"varint,4,opt,name=OutHigh,proto3" json:"OutHigh,omitempty"`
	InFanActive bool   `protobuf:"varint,5,opt,name=InFanActive,proto3" json:"InFanActive,omitempty"`
	InAway      uint32 `protobuf:"varint,6,opt,name=InAway,proto3" json:"InAway,omitempty"`
	InLow       uint32 `protobuf:"varint,7,opt,name=InLow,proto3" json:"InLow,omitempty"`
	InMid       uint32 `protobuf:"varint,8,opt,name=InMid,proto3" json:"InMid,omitempty"`
	InHigh      uint32 `protobuf:"varint,9,opt,name=InHigh,proto3" json:"InHigh,omitempty"`
	CurrentOut  uint32 `protobuf:"varint,10,opt,name=CurrentOut,proto3" json:"CurrentOut,omitempty"`
	CurrentIn   uint32 `protobuf:"varint,11,opt,name=CurrentIn,proto3" json:"CurrentIn,omitempty"`
	CurrentMode uint32 `protobuf:"varint,12,opt,name=CurrentMode,proto3" json:"CurrentMode,omitempty"`
}

func (x *FanProfiles) Reset() {
	*x = FanProfiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comfo_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FanProfiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FanProfiles) ProtoMessage() {}

func (x *FanProfiles) ProtoReflect() protoreflect.Message {
	mi := &file_comfo_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FanProfiles.ProtoReflect.Descriptor instead.
func (*FanProfiles) Descriptor() ([]byte, []int) {
	return file_comfo_proto_rawDescGZIP(), []int{7}
}

func (x *FanProfiles) GetOutAway() uint32 {
	if x != nil {
		return x.OutAway
	}
	return 0
}

func (x *FanProfiles) GetOutLow() uint32 {
	if x != nil {
		return x.OutLow
	}
	return 0
}

func (x *FanProfiles) GetOutMid() uint32 {
	if x != nil {
		return x.OutMid
	}
	return 0
}

func (x *FanProfiles) GetOutHigh() uint32 {
	if x != nil {
		return x.OutHigh
	}
	return 0
}

func (x *FanProfiles) GetInFanActive() bool {
	if x != nil {
		return x.InFanActive
	}
	return false
}

func (x *FanProfiles) GetInAway() uint32 {
	if x != nil {
		return x.InAway
	}
	return 0
}

func (x *FanProfiles) GetInLow() uint32 {
	if x != nil {
		return x.InLow
	}
	return 0
}

func (x *FanProfiles) GetInMid() uint32 {
	if x != nil {
		return x.InMid
	}
	return 0
}

func (x *FanProfiles) GetInHigh() uint32 {
	if x != nil {
		return x.InHigh
	}
	return 0
}

func (x *FanProfiles) GetCurrentOut() uint32 {
	if x != nil {
		return x.CurrentOut
	}
	return 0
}

func (x *FanProfiles) GetCurrentIn() uint32 {
	if x != nil {
		return x.CurrentIn
	}
	return 0
}

func (x *FanProfiles) GetCurrentMode() uint32 {
	if x != nil {
		return x.CurrentMode
	}
	return 0
}

type FanProfileTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode        uint32 `protobuf:"varint,1,opt,name=Mode,proto3" json:"Mode,omitempty"`               // The profile to configure (1-4).
	TargetSpeed uint32 `protobuf:"varint,2,opt,name=TargetSpeed,proto3" json:"TargetSpeed,omitempty"` // The target speed in percent.
}

func (x *FanProfileTarget) Reset() {
	*x = FanProfileTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comfo_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FanProfileTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FanProfileTarget) ProtoMessage() {}

func (x *FanProfileTarget) ProtoReflect() protoreflect.Message {
	mi := &file_comfo_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FanProfileTarget.ProtoReflect.Descriptor instead.
func (*FanProfileTarget) Descriptor() ([]byte, []int) {
	return file_comfo_proto_rawDescGZIP(), []int{8}
}

func (x *FanProfileTarget) GetMode() uint32 {
	if x != nil {
		return x.Mode
	}
	return 0
}

func (x *FanProfileTarget) GetTargetSpeed() uint32 {
	if x != nil {
		return x.TargetSpeed
	}
	return 0
}

type FanProfileModified struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modified      bool   `protobuf:"varint,1,opt,name=Modified,proto3" json:"Modified,omitempty"`           // Whether the mode's speed was modified or not.
	OriginalSpeed uint32 `protobuf:"varint,2,opt,name=OriginalSpeed,proto3" json:"OriginalSpeed,omitempty"` // The fan speed before this modification.
	TargetSpeed   uint32 `protobuf:"varint,3,opt,name=TargetSpeed,proto3" json:"TargetSpeed,omitempty"`     // Target speed sent in the request.
	ReqTime       string `protobuf:"bytes,4,opt,name=ReqTime,proto3" json:"ReqTime,omitempty"`              // Total time spent processing the back-end request.
}

func (x *FanProfileModified) Reset() {
	*x = FanProfileModified{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comfo_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FanProfileModified) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FanProfileModified) ProtoMessage() {}

func (x *FanProfileModified) ProtoReflect() protoreflect.Message {
	mi := &file_comfo_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FanProfileModified.ProtoReflect.Descriptor instead.
func (*FanProfileModified) Descriptor() ([]byte, []int) {
	return file_comfo_proto_rawDescGZIP(), []int{9}
}

func (x *FanProfileModified) GetModified() bool {
	if x != nil {
		return x.Modified
	}
	return false
}

func (x *FanProfileModified) GetOriginalSpeed() uint32 {
	if x != nil {
		return x.OriginalSpeed
	}
	return 0
}

func (x *FanProfileModified) GetTargetSpeed() uint32 {
	if x != nil {
		return x.TargetSpeed
	}
	return 0
}

func (x *FanProfileModified) GetReqTime() string {
	if x != nil {
		return x.ReqTime
	}
	return ""
}

// Abs can be set to activate a specific profile.
// Rel activates the next (higher) profile when True, lower when False.
// Abs and Rel are mutually exclusive.
type FanSpeedTarget struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Abs uint32 `protobuf:"varint,1,opt,name=Abs,proto3" json:"Abs,omitempty"` // The profile to activate (1-4).
	Rel bool   `protobuf:"varint,2,opt,name=Rel,proto3" json:"Rel,omitempty"` // Set False to step down, True to step up.
}

func (x *FanSpeedTarget) Reset() {
	*x = FanSpeedTarget{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comfo_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FanSpeedTarget) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FanSpeedTarget) ProtoMessage() {}

func (x *FanSpeedTarget) ProtoReflect() protoreflect.Message {
	mi := &file_comfo_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FanSpeedTarget.ProtoReflect.Descriptor instead.
func (*FanSpeedTarget) Descriptor() ([]byte, []int) {
	return file_comfo_proto_rawDescGZIP(), []int{10}
}

func (x *FanSpeedTarget) GetAbs() uint32 {
	if x != nil {
		return x.Abs
	}
	return 0
}

func (x *FanSpeedTarget) GetRel() bool {
	if x != nil {
		return x.Rel
	}
	return false
}

type FanSpeedModified struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modified      bool   `protobuf:"varint,1,opt,name=Modified,proto3" json:"Modified,omitempty"`           // Whether the fan speed was modified or not.
	OriginalSpeed uint32 `protobuf:"varint,2,opt,name=OriginalSpeed,proto3" json:"OriginalSpeed,omitempty"` // The fan speed before this modification.
	TargetSpeed   uint32 `protobuf:"varint,3,opt,name=TargetSpeed,proto3" json:"TargetSpeed,omitempty"`     // Target speed sent in the request.
	ReqTime       string `protobuf:"bytes,4,opt,name=ReqTime,proto3" json:"ReqTime,omitempty"`              // Total time spent processing the back-end request.
}

func (x *FanSpeedModified) Reset() {
	*x = FanSpeedModified{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comfo_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FanSpeedModified) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FanSpeedModified) ProtoMessage() {}

func (x *FanSpeedModified) ProtoReflect() protoreflect.Message {
	mi := &file_comfo_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FanSpeedModified.ProtoReflect.Descriptor instead.
func (*FanSpeedModified) Descriptor() ([]byte, []int) {
	return file_comfo_proto_rawDescGZIP(), []int{11}
}

func (x *FanSpeedModified) GetModified() bool {
	if x != nil {
		return x.Modified
	}
	return false
}

func (x *FanSpeedModified) GetOriginalSpeed() uint32 {
	if x != nil {
		return x.OriginalSpeed
	}
	return 0
}

func (x *FanSpeedModified) GetTargetSpeed() uint32 {
	if x != nil {
		return x.TargetSpeed
	}
	return 0
}

func (x *FanSpeedModified) GetReqTime() string {
	if x != nil {
		return x.ReqTime
	}
	return ""
}

type Hours struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FanAway      uint32 `protobuf:"varint,1,opt,name=FanAway,proto3" json:"FanAway,omitempty"`
	FanLow       uint32 `protobuf:"varint,2,opt,name=FanLow,proto3" json:"FanLow,omitempty"`
	FanMid       uint32 `protobuf:"varint,3,opt,name=FanMid,proto3" json:"FanMid,omitempty"`
	FanHigh      uint32 `protobuf:"varint,4,opt,name=FanHigh,proto3" json:"FanHigh,omitempty"`
	FrostProtect uint32 `protobuf:"varint,5,opt,name=FrostProtect,proto3" json:"FrostProtect,omitempty"`
	Reheating    uint32 `protobuf:"varint,6,opt,name=Reheating,proto3" json:"Reheating,omitempty"`
	BypassOpen   uint32 `protobuf:"varint,7,opt,name=BypassOpen,proto3" json:"BypassOpen,omitempty"`
	Filter       uint32 `protobuf:"varint,8,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *Hours) Reset() {
	*x = Hours{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comfo_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hours) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hours) ProtoMessage() {}

func (x *Hours) ProtoReflect() protoreflect.Message {
	mi := &file_comfo_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hours.ProtoReflect.Descriptor instead.
func (*Hours) Descriptor() ([]byte, []int) {
	return file_comfo_proto_rawDescGZIP(), []int{12}
}

func (x *Hours) GetFanAway() uint32 {
	if x != nil {
		return x.FanAway
	}
	return 0
}

func (x *Hours) GetFanLow() uint32 {
	if x != nil {
		return x.FanLow
	}
	return 0
}

func (x *Hours) GetFanMid() uint32 {
	if x != nil {
		return x.FanMid
	}
	return 0
}

func (x *Hours) GetFanHigh() uint32 {
	if x != nil {
		return x.FanHigh
	}
	return 0
}

func (x *Hours) GetFrostProtect() uint32 {
	if x != nil {
		return x.FrostProtect
	}
	return 0
}

func (x *Hours) GetReheating() uint32 {
	if x != nil {
		return x.Reheating
	}
	return 0
}

func (x *Hours) GetBypassOpen() uint32 {
	if x != nil {
		return x.BypassOpen
	}
	return 0
}

func (x *Hours) GetFilter() uint32 {
	if x != nil {
		return x.Filter
	}
	return 0
}

type Temps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Comfort     float32 `protobuf:"fixed32,1,opt,name=Comfort,proto3" json:"Comfort,omitempty"`
	OutsideAir  float32 `protobuf:"fixed32,2,opt,name=OutsideAir,proto3" json:"OutsideAir,omitempty"`
	SupplyAir   float32 `protobuf:"fixed32,3,opt,name=SupplyAir,proto3" json:"SupplyAir,omitempty"`
	InsideAir   float32 `protobuf:"fixed32,4,opt,name=InsideAir,proto3" json:"InsideAir,omitempty"`
	ExhaustAir  float32 `protobuf:"fixed32,5,opt,name=ExhaustAir,proto3" json:"ExhaustAir,omitempty"`
	GeoHeat     float32 `protobuf:"fixed32,6,opt,name=GeoHeat,proto3" json:"GeoHeat,omitempty"`
	Reheating   float32 `protobuf:"fixed32,7,opt,name=Reheating,proto3" json:"Reheating,omitempty"`
	KitchenHood float32 `protobuf:"fixed32,8,opt,name=KitchenHood,proto3" json:"KitchenHood,omitempty"`
}

func (x *Temps) Reset() {
	*x = Temps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comfo_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Temps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Temps) ProtoMessage() {}

func (x *Temps) ProtoReflect() protoreflect.Message {
	mi := &file_comfo_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Temps.ProtoReflect.Descriptor instead.
func (*Temps) Descriptor() ([]byte, []int) {
	return file_comfo_proto_rawDescGZIP(), []int{13}
}

func (x *Temps) GetComfort() float32 {
	if x != nil {
		return x.Comfort
	}
	return 0
}

func (x *Temps) GetOutsideAir() float32 {
	if x != nil {
		return x.OutsideAir
	}
	return 0
}

func (x *Temps) GetSupplyAir() float32 {
	if x != nil {
		return x.SupplyAir
	}
	return 0
}

func (x *Temps) GetInsideAir() float32 {
	if x != nil {
		return x.InsideAir
	}
	return 0
}

func (x *Temps) GetExhaustAir() float32 {
	if x != nil {
		return x.ExhaustAir
	}
	return 0
}

func (x *Temps) GetGeoHeat() float32 {
	if x != nil {
		return x.GeoHeat
	}
	return 0
}

func (x *Temps) GetReheating() float32 {
	if x != nil {
		return x.Reheating
	}
	return 0
}

func (x *Temps) GetKitchenHood() float32 {
	if x != nil {
		return x.KitchenHood
	}
	return 0
}

type FlushCacheRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of cache to flush.
	Cache FlushCacheRequest_CacheType `protobuf:"varint,1,opt,name=Cache,proto3,enum=comfo.api.FlushCacheRequest_CacheType" json:"Cache,omitempty"`
}

func (x *FlushCacheRequest) Reset() {
	*x = FlushCacheRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comfo_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushCacheRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushCacheRequest) ProtoMessage() {}

func (x *FlushCacheRequest) ProtoReflect() protoreflect.Message {
	mi := &file_comfo_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushCacheRequest.ProtoReflect.Descriptor instead.
func (*FlushCacheRequest) Descriptor() ([]byte, []int) {
	return file_comfo_proto_rawDescGZIP(), []int{14}
}

func (x *FlushCacheRequest) GetCache() FlushCacheRequest_CacheType {
	if x != nil {
		return x.Cache
	}
	return FlushCacheRequest_BootInfo
}

type FlushCacheResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"` // Whether the flush operation was successful.
	ReqTime string `protobuf:"bytes,2,opt,name=ReqTime,proto3" json:"ReqTime,omitempty"`  // Total time spent processing the back-end request.
}

func (x *FlushCacheResponse) Reset() {
	*x = FlushCacheResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_comfo_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FlushCacheResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushCacheResponse) ProtoMessage() {}

func (x *FlushCacheResponse) ProtoReflect() protoreflect.Message {
	mi := &file_comfo_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushCacheResponse.ProtoReflect.Descriptor instead.
func (*FlushCacheResponse) Descriptor() ([]byte, []int) {
	return file_comfo_proto_rawDescGZIP(), []int{15}
}

func (x *FlushCacheResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FlushCacheResponse) GetReqTime() string {
	if x != nil {
		return x.ReqTime
	}
	return ""
}

var File_comfo_proto protoreflect.FileDescriptor

var file_comfo_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x66, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x63,
	0x6f, 0x6d, 0x66, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x22, 0x06, 0x0a, 0x04, 0x4e, 0x6f, 0x6f, 0x70,
	0x22, 0x76, 0x0a, 0x06, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x72, 0x72,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x43, 0x6f,
	0x72, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x75, 0x6d, 0x6d,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x53, 0x75,
	0x6d, 0x6d, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0x94, 0x01, 0x0a, 0x08, 0x42, 0x6f, 0x6f,
	0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x6a, 0x6f, 0x72, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x4d, 0x61, 0x6a,
	0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x69, 0x6e,
	0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x4d, 0x69, 0x6e, 0x6f, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a,
	0x0b, 0x42, 0x65, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x42, 0x65, 0x74, 0x61, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x31, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x66, 0x6f, 0x72, 0x74, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x66, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x66, 0x6f, 0x72, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x22, 0x8b, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x66, 0x6f, 0x72, 0x74, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x54, 0x65,
	0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x71, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0x20, 0x0a, 0x06, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x22, 0x7a, 0x0a, 0x04, 0x46, 0x61, 0x6e, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e,
	0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x49,
	0x6e, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x50,
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x4f, 0x75,
	0x74, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x49, 0x6e, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x75, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x4f, 0x75, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x22, 0xcf,
	0x02, 0x0a, 0x0b, 0x46, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x4f, 0x75, 0x74, 0x41, 0x77, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x07, 0x4f, 0x75, 0x74, 0x41, 0x77, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x4c,
	0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x4f, 0x75, 0x74, 0x4c, 0x6f, 0x77,
	0x12, 0x16, 0x0a, 0x06, 0x4f, 0x75, 0x74, 0x4d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x4f, 0x75, 0x74, 0x4d, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x75, 0x74, 0x48,
	0x69, 0x67, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x4f, 0x75, 0x74, 0x48, 0x69,
	0x67, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x6e, 0x46, 0x61, 0x6e, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x6e, 0x46, 0x61, 0x6e, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6e, 0x41, 0x77, 0x61, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x49, 0x6e, 0x41, 0x77, 0x61, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x49, 0x6e, 0x4c, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x49, 0x6e, 0x4c,
	0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x4d, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x05, 0x49, 0x6e, 0x4d, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6e, 0x48, 0x69,
	0x67, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x49, 0x6e, 0x48, 0x69, 0x67, 0x68,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4f, 0x75, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x22, 0x48, 0x0a, 0x10, 0x46, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x22, 0x92, 0x01, 0x0a, 0x12, 0x46,
	0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x70,
	0x65, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x71, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0x34, 0x0a, 0x0e, 0x46, 0x61, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x62, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x41, 0x62, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x52, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x03, 0x52, 0x65, 0x6c, 0x22, 0x90, 0x01, 0x0a, 0x10, 0x46, 0x61, 0x6e, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4d, 0x6f,
	0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x4f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x70, 0x65, 0x65, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x52, 0x65, 0x71, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x52, 0x65, 0x71, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x05, 0x48, 0x6f, 0x75,
	0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x61, 0x6e, 0x41, 0x77, 0x61, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x46, 0x61, 0x6e, 0x41, 0x77, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x46, 0x61, 0x6e, 0x4c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x46, 0x61,
	0x6e, 0x4c, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x61, 0x6e, 0x4d, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x46, 0x61, 0x6e, 0x4d, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x46, 0x61, 0x6e, 0x48, 0x69, 0x67, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x46,
	0x61, 0x6e, 0x48, 0x69, 0x67, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x72, 0x6f, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x46, 0x72,
	0x6f, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65,
	0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x52,
	0x65, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x79, 0x70, 0x61,
	0x73, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x42, 0x79,
	0x70, 0x61, 0x73, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0xf7, 0x01, 0x0a, 0x05, 0x54, 0x65, 0x6d, 0x70, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f,
	0x6d, 0x66, 0x6f, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x43, 0x6f, 0x6d,
	0x66, 0x6f, 0x72, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64, 0x65, 0x41,
	0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x4f, 0x75, 0x74, 0x73, 0x69, 0x64,
	0x65, 0x41, 0x69, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x41, 0x69,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x41,
	0x69, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x41, 0x69, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x41, 0x69, 0x72,
	0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74, 0x41, 0x69, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x45, 0x78, 0x68, 0x61, 0x75, 0x73, 0x74, 0x41, 0x69, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x47, 0x65, 0x6f, 0x48, 0x65, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x47, 0x65, 0x6f, 0x48, 0x65, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65,
	0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x52,
	0x65, 0x68, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x4b, 0x69, 0x74, 0x63,
	0x68, 0x65, 0x6e, 0x48, 0x6f, 0x6f, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x4b,
	0x69, 0x74, 0x63, 0x68, 0x65, 0x6e, 0x48, 0x6f, 0x6f, 0x64, 0x22, 0xa4, 0x01, 0x0a, 0x11, 0x46,
	0x6c, 0x75, 0x73, 0x68, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3c, 0x0a, 0x05, 0x43, 0x61, 0x63, 0x68, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x63, 0x6f, 0x6d, 0x66, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6c, 0x75, 0x73,
	0x68, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x43, 0x61, 0x63, 0x68, 0x65, 0x22, 0x51,
	0x0a, 0x09, 0x43, 0x61, 0x63, 0x68, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x42,
	0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x61, 0x6e,
	0x73, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x65, 0x6d, 0x70, 0x73, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x10,
	0x0a, 0x22, 0x48, 0x0a, 0x12, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x43, 0x61, 0x63, 0x68, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x52, 0x65, 0x71, 0x54, 0x69, 0x6d, 0x65, 0x32, 0xdc, 0x04, 0x0a, 0x05,
	0x43, 0x6f, 0x6d, 0x66, 0x6f, 0x12, 0x33, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x42, 0x6f, 0x6f, 0x74,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x66, 0x6f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x4e, 0x6f, 0x6f, 0x70, 0x1a, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x66, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x42, 0x6f, 0x6f, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2d, 0x0a, 0x08, 0x47, 0x65,
	0x74, 0x54, 0x65, 0x6d, 0x70, 0x73, 0x12, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x66, 0x6f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x6f, 0x70, 0x1a, 0x10, 0x2e, 0x63, 0x6f, 0x6d, 0x66, 0x6f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x12, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x66, 0x6f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x6f, 0x70, 0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x66, 0x6f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x47, 0x65,
	0x74, 0x46, 0x61, 0x6e, 0x73, 0x12, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x66, 0x6f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x4e, 0x6f, 0x6f, 0x70, 0x1a, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x66, 0x6f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x46, 0x61, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x46, 0x61,
	0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x66,
	0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x6f, 0x70, 0x1a, 0x16, 0x2e, 0x63, 0x6f, 0x6d,
	0x66, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x12, 0x2f, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x12,
	0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x66, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4e, 0x6f, 0x6f, 0x70,
	0x1a, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x66, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x73, 0x12, 0x45, 0x0a, 0x0b, 0x53, 0x65, 0x74, 0x46, 0x61, 0x6e, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x12, 0x19, 0x2e, 0x63, 0x6f, 0x6d, 0x66, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46,
	0x61, 0x6e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0x1b, 0x2e,
	0x63, 0x6f, 0x6d, 0x66, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x61, 0x6e, 0x53, 0x70, 0x65,
	0x65, 0x64, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x46, 0x0a, 0x0e, 0x53, 0x65,
	0x74, 0x43, 0x6f, 0x6d, 0x66, 0x6f, 0x72, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x18, 0x2e, 0x63,
	0x6f, 0x6d, 0x66, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x66, 0x6f, 0x72, 0x74,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x1a, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x66, 0x6f, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x6f, 0x6d, 0x66, 0x6f, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69,
	0x65, 0x64, 0x12, 0x4b, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x46, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66,
	0x69, 0x6c, 0x65, 0x12, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x66, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x46, 0x61, 0x6e, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x1a, 0x1d, 0x2e, 0x63, 0x6f, 0x6d, 0x66, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x61, 0x6e,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12,
	0x49, 0x0a, 0x0a, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x1c, 0x2e,
	0x63, 0x6f, 0x6d, 0x66, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x63, 0x6f,
	0x6d, 0x66, 0x6f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x46, 0x6c, 0x75, 0x73, 0x68, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x28, 0x5a, 0x26, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x69, 0x2d, 0x6d, 0x6f, 0x2f, 0x63,
	0x6f, 0x6d, 0x66, 0x6f, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x63, 0x6f, 0x6d, 0x66, 0x6f, 0x3b, 0x63,
	0x6f, 0x6d, 0x66, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_comfo_proto_rawDescOnce sync.Once
	file_comfo_proto_rawDescData = file_comfo_proto_rawDesc
)

func file_comfo_proto_rawDescGZIP() []byte {
	file_comfo_proto_rawDescOnce.Do(func() {
		file_comfo_proto_rawDescData = protoimpl.X.CompressGZIP(file_comfo_proto_rawDescData)
	})
	return file_comfo_proto_rawDescData
}

var file_comfo_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_comfo_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_comfo_proto_goTypes = []interface{}{
	(FlushCacheRequest_CacheType)(0), // 0: comfo.api.FlushCacheRequest.CacheType
	(*Noop)(nil),                     // 1: comfo.api.Noop
	(*Bypass)(nil),                   // 2: comfo.api.Bypass
	(*BootInfo)(nil),                 // 3: comfo.api.BootInfo
	(*ComfortTarget)(nil),            // 4: comfo.api.ComfortTarget
	(*ComfortModified)(nil),          // 5: comfo.api.ComfortModified
	(*Errors)(nil),                   // 6: comfo.api.Errors
	(*Fans)(nil),                     // 7: comfo.api.Fans
	(*FanProfiles)(nil),              // 8: comfo.api.FanProfiles
	(*FanProfileTarget)(nil),         // 9: comfo.api.FanProfileTarget
	(*FanProfileModified)(nil),       // 10: comfo.api.FanProfileModified
	(*FanSpeedTarget)(nil),           // 11: comfo.api.FanSpeedTarget
	(*FanSpeedModified)(nil),         // 12: comfo.api.FanSpeedModified
	(*Hours)(nil),                    // 13: comfo.api.Hours
	(*Temps)(nil),                    // 14: comfo.api.Temps
	(*FlushCacheRequest)(nil),        // 15: comfo.api.FlushCacheRequest
	(*FlushCacheResponse)(nil),       // 16: comfo.api.FlushCacheResponse
}
var file_comfo_proto_depIdxs = []int32{
	0,  // 0: comfo.api.FlushCacheRequest.Cache:type_name -> comfo.api.FlushCacheRequest.CacheType
	1,  // 1: comfo.api.Comfo.GetBootInfo:input_type -> comfo.api.Noop
	1,  // 2: comfo.api.Comfo.GetTemps:input_type -> comfo.api.Noop
	1,  // 3: comfo.api.Comfo.GetBypass:input_type -> comfo.api.Noop
	1,  // 4: comfo.api.Comfo.GetFans:input_type -> comfo.api.Noop
	1,  // 5: comfo.api.Comfo.GetFanProfiles:input_type -> comfo.api.Noop
	1,  // 6: comfo.api.Comfo.GetErrors:input_type -> comfo.api.Noop
	11, // 7: comfo.api.Comfo.SetFanSpeed:input_type -> comfo.api.FanSpeedTarget
	4,  // 8: comfo.api.Comfo.SetComfortTemp:input_type -> comfo.api.ComfortTarget
	9,  // 9: comfo.api.Comfo.SetFanProfile:input_type -> comfo.api.FanProfileTarget
	15, // 10: comfo.api.Comfo.FlushCache:input_type -> comfo.api.FlushCacheRequest
	3,  // 11: comfo.api.Comfo.GetBootInfo:output_type -> comfo.api.BootInfo
	14, // 12: comfo.api.Comfo.GetTemps:output_type -> comfo.api.Temps
	2,  // 13: comfo.api.Comfo.GetBypass:output_type -> comfo.api.Bypass
	7,  // 14: comfo.api.Comfo.GetFans:output_type -> comfo.api.Fans
	8,  // 15: comfo.api.Comfo.GetFanProfiles:output_type -> comfo.api.FanProfiles
	6,  // 16: comfo.api.Comfo.GetErrors:output_type -> comfo.api.Errors
	12, // 17: comfo.api.Comfo.SetFanSpeed:output_type -> comfo.api.FanSpeedModified
	5,  // 18: comfo.api.Comfo.SetComfortTemp:output_type -> comfo.api.ComfortModified
	10, // 19: comfo.api.Comfo.SetFanProfile:output_type -> comfo.api.FanProfileModified
	16, // 20: comfo.api.Comfo.FlushCache:output_type -> comfo.api.FlushCacheResponse
	11, // [11:21] is the sub-list for method output_type
	1,  // [1:11] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_comfo_proto_init() }
func file_comfo_proto_init() {
	if File_comfo_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_comfo_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Noop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comfo_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Bypass); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comfo_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BootInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comfo_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComfortTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comfo_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComfortModified); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comfo_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Errors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comfo_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fans); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comfo_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FanProfiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comfo_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FanProfileTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comfo_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FanProfileModified); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comfo_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FanSpeedTarget); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comfo_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FanSpeedModified); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comfo_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hours); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comfo_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Temps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comfo_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushCacheRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_comfo_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FlushCacheResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_comfo_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_comfo_proto_goTypes,
		DependencyIndexes: file_comfo_proto_depIdxs,
		EnumInfos:         file_comfo_proto_enumTypes,
		MessageInfos:      file_comfo_proto_msgTypes,
	}.Build()
	File_comfo_proto = out.File
	file_comfo_proto_rawDesc = nil
	file_comfo_proto_goTypes = nil
	file_comfo_proto_depIdxs = nil
}
